From 6d2a900487bb9a41f16de4f0092cc9345580e356 Mon Sep 17 00:00:00 2001
From: Florian Will <florian.will@gmail.com>
Date: Thu, 29 Feb 2024 13:15:02 +0100
Subject: [PATCH 1/3] include: Add TCP_KEEPCNT and TCP_KEEPINTVL definitions.

---
 include/ws2ipdef.h | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/include/ws2ipdef.h b/include/ws2ipdef.h
index fcb1f56c005..72e2dad2fa5 100644
--- a/include/ws2ipdef.h
+++ b/include/ws2ipdef.h
@@ -313,6 +313,8 @@ typedef struct WS(in6_pktinfo) {
 #define TCP_OFFLOAD_PREFERENCE          11
 #define TCP_CONGESTION_ALGORITHM        12
 #define TCP_DELAY_FIN_ACK               13
+#define TCP_KEEPCNT                     16
+#define TCP_KEEPINTVL                   17
 #else
 /* WS_TCP_NODELAY is defined elsewhere */
 #define WS_TCP_EXPEDITED_1122           2
@@ -327,6 +329,8 @@ typedef struct WS(in6_pktinfo) {
 #define WS_TCP_OFFLOAD_PREFERENCE       11
 #define WS_TCP_CONGESTION_ALGORITHM     12
 #define WS_TCP_DELAY_FIN_ACK            13
+#define WS_TCP_KEEPCNT                  16
+#define WS_TCP_KEEPINTVL                17
 #endif /* USE_WS_PREFIX */

 #define PROTECTION_LEVEL_UNRESTRICTED   10
--
GitLab


From 8dc5242e2998afed87bc57db5798eea85877094e Mon Sep 17 00:00:00 2001
From: Florian Will <florian.will@gmail.com>
Date: Thu, 29 Feb 2024 13:48:32 +0100
Subject: [PATCH 3/3] ws2_32: Implement TCP_KEEP{ALIVE,CNT,INTVL} options.

---
 dlls/ntdll/unix/socket.c | 28 ++++++++++++++++++
 dlls/ws2_32/socket.c     | 63 ++++++++++++++++++++++++++++++++++++++++
 dlls/ws2_32/tests/sock.c | 18 ++++++------
 include/wine/afd.h       |  6 ++++
 4 files changed, 106 insertions(+), 9 deletions(-)

diff --git a/dlls/ntdll/unix/socket.c b/dlls/ntdll/unix/socket.c
index 4e6781df607..4b0dca37e7d 100644
--- a/dlls/ntdll/unix/socket.c
+++ b/dlls/ntdll/unix/socket.c
@@ -2507,6 +2507,34 @@ NTSTATUS sock_ioctl( HANDLE handle, HANDLE event, PIO_APC_ROUTINE apc, void *apc
         case IOCTL_AFD_WINE_SET_TCP_NODELAY:
             return do_setsockopt( handle, io, IPPROTO_TCP, TCP_NODELAY, in_buffer, in_size );

+#if defined(TCP_KEEPIDLE)
+        /* TCP_KEEPALIVE on Windows is often called TCP_KEEPIDLE on Unix */
+        case IOCTL_AFD_WINE_GET_TCP_KEEPALIVE:
+            return do_getsockopt( handle, io, IPPROTO_TCP, TCP_KEEPIDLE, out_buffer, out_size );
+
+        case IOCTL_AFD_WINE_SET_TCP_KEEPALIVE:
+            return do_setsockopt( handle, io, IPPROTO_TCP, TCP_KEEPIDLE, in_buffer, in_size );
+#elif defined(TCP_KEEPALIVE)
+        /* Mac */
+        case IOCTL_AFD_WINE_GET_TCP_KEEPALIVE:
+            return do_getsockopt( handle, io, IPPROTO_TCP, TCP_KEEPALIVE, out_buffer, out_size );
+
+        case IOCTL_AFD_WINE_SET_TCP_KEEPALIVE:
+            return do_setsockopt( handle, io, IPPROTO_TCP, TCP_KEEPALIVE, in_buffer, in_size );
+#endif
+
+        case IOCTL_AFD_WINE_GET_TCP_KEEPINTVL:
+            return do_getsockopt( handle, io, IPPROTO_TCP, TCP_KEEPINTVL, out_buffer, out_size );
+
+        case IOCTL_AFD_WINE_SET_TCP_KEEPINTVL:
+            return do_setsockopt( handle, io, IPPROTO_TCP, TCP_KEEPINTVL, in_buffer, in_size );
+
+        case IOCTL_AFD_WINE_GET_TCP_KEEPCNT:
+            return do_getsockopt( handle, io, IPPROTO_TCP, TCP_KEEPCNT, out_buffer, out_size );
+
+        case IOCTL_AFD_WINE_SET_TCP_KEEPCNT:
+            return do_setsockopt( handle, io, IPPROTO_TCP, TCP_KEEPCNT, in_buffer, in_size );
+
         default:
         {
             if ((code >> 16) == FILE_DEVICE_NETWORK)
diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index 6aab249a1b8..eb84558cbac 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -1931,6 +1931,36 @@ int WINAPI getsockopt( SOCKET s, int level, int optname, char *optval, int *optl
             *optlen = 1;
             return server_getsockopt( s, IOCTL_AFD_WINE_GET_TCP_NODELAY, optval, optlen );

+        case TCP_KEEPALIVE:
+            if (*optlen < sizeof(DWORD) || !optval)
+            {
+                *optlen = 0;
+                SetLastError( WSAEFAULT );
+                return SOCKET_ERROR;
+            }
+            *optlen = sizeof(DWORD);
+            return server_getsockopt( s, IOCTL_AFD_WINE_GET_TCP_KEEPALIVE, optval, optlen );
+
+        case TCP_KEEPCNT:
+            if (*optlen < sizeof(DWORD) || !optval)
+            {
+                *optlen = 0;
+                SetLastError( WSAEFAULT );
+                return SOCKET_ERROR;
+            }
+            *optlen = sizeof(DWORD);
+            return server_getsockopt( s, IOCTL_AFD_WINE_GET_TCP_KEEPCNT, optval, optlen );
+
+        case TCP_KEEPINTVL:
+            if (*optlen < sizeof(DWORD) || !optval)
+            {
+                *optlen = 0;
+                SetLastError( WSAEFAULT );
+                return SOCKET_ERROR;
+            }
+            *optlen = sizeof(DWORD);
+            return server_getsockopt( s, IOCTL_AFD_WINE_GET_TCP_KEEPINTVL, optval, optlen );
+
         default:
             FIXME( "unrecognized TCP option %#x\n", optname );
             SetLastError( WSAENOPROTOOPT );
@@ -3325,6 +3355,12 @@ int WINAPI setsockopt( SOCKET s, int level, int optname, const char *optval, int
         break; /* case NSPROTO_IPX */

     case IPPROTO_TCP:
+        if (optlen < 0)
+        {
+            SetLastError(WSAENOBUFS);
+            return SOCKET_ERROR;
+        }
+
         switch(optname)
         {
         case TCP_NODELAY:
@@ -3336,6 +3372,33 @@ int WINAPI setsockopt( SOCKET s, int level, int optname, const char *optval, int
             value = *optval;
             return server_setsockopt( s, IOCTL_AFD_WINE_SET_TCP_NODELAY, (char*)&value, sizeof(value) );

+        case TCP_KEEPALIVE:
+            if (optlen < sizeof(DWORD) || !optval)
+            {
+                SetLastError( WSAEFAULT );
+                return SOCKET_ERROR;
+            }
+            value = *(DWORD*)optval;
+            return server_setsockopt( s, IOCTL_AFD_WINE_SET_TCP_KEEPALIVE, (char*)&value, sizeof(value) );
+
+        case TCP_KEEPCNT:
+            if (optlen < sizeof(DWORD) || !optval)
+            {
+                SetLastError( WSAEFAULT );
+                return SOCKET_ERROR;
+            }
+            value = *(DWORD*)optval;
+            return server_setsockopt( s, IOCTL_AFD_WINE_SET_TCP_KEEPCNT, (char*)&value, sizeof(value) );
+
+        case TCP_KEEPINTVL:
+            if (optlen < sizeof(DWORD) || !optval)
+            {
+                SetLastError( WSAEFAULT );
+                return SOCKET_ERROR;
+            }
+            value = *(DWORD*)optval;
+            return server_setsockopt( s, IOCTL_AFD_WINE_SET_TCP_KEEPINTVL, (char*)&value, sizeof(value) );
+
         default:
             FIXME("Unknown IPPROTO_TCP optname 0x%08x\n", optname);
             SetLastError(WSAENOPROTOOPT);
diff --git a/include/wine/afd.h b/include/wine/afd.h
index 788adb4a495..aba559ebd8a 100644
--- a/include/wine/afd.h
+++ b/include/wine/afd.h
@@ -285,6 +285,12 @@ C_ASSERT( sizeof(struct afd_get_events_params) == 56 );
 #define IOCTL_AFD_WINE_SET_IP_RECVTOS                   WINE_AFD_IOC(296)
 #define IOCTL_AFD_WINE_GET_SO_EXCLUSIVEADDRUSE          WINE_AFD_IOC(297)
 #define IOCTL_AFD_WINE_SET_SO_EXCLUSIVEADDRUSE          WINE_AFD_IOC(298)
+#define IOCTL_AFD_WINE_GET_TCP_KEEPALIVE                WINE_AFD_IOC(299)
+#define IOCTL_AFD_WINE_SET_TCP_KEEPALIVE                WINE_AFD_IOC(300)
+#define IOCTL_AFD_WINE_GET_TCP_KEEPCNT                  WINE_AFD_IOC(301)
+#define IOCTL_AFD_WINE_SET_TCP_KEEPCNT                  WINE_AFD_IOC(302)
+#define IOCTL_AFD_WINE_GET_TCP_KEEPINTVL                WINE_AFD_IOC(303)
+#define IOCTL_AFD_WINE_SET_TCP_KEEPINTVL                WINE_AFD_IOC(304)

 struct afd_iovec
 {
--
GitLab

