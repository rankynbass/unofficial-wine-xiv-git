From a614ec584bc19995fdfb535ae4cef81efe9966df Mon Sep 17 00:00:00 2001
From: Eric Sullivan <esullivan@nvidia.com>
Date: Wed, 11 Oct 2023 15:43:36 -0700
Subject: [PATCH] winevulkan: Add support for VK_NV_low_latency2

To support VK_NV_low_latency2 a frame ID should be provided for each
call to vkQueueSubmit. This commit adds a path for fshack to provide
a frame ID when it submits its upscaling work, when low latency mode
is enabled.
---
diff --git a/dlls/win32u/vulkan.c b/dlls/win32u/vulkan.c
index 4cb3997f648..85ef9498575 100644
--- a/dlls/win32u/vulkan.c
+++ b/dlls/win32u/vulkan.c
@@ -852,6 +852,24 @@ fail:
     return res;
 }
 
+static VkResult win32u_vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV *pSleepModeInfo)
+{
+    VkLatencySleepModeInfoNV sleep_mode_info_host;
+
+    struct vulkan_device *vk_device = vulkan_device_from_handle(device);
+    struct swapchain *vk_swapchain = swapchain_from_handle(swapchain);
+
+    vk_device->low_latency_enabled = pSleepModeInfo->lowLatencyMode;
+
+    sleep_mode_info_host.sType = VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV;
+    sleep_mode_info_host.pNext = NULL;
+    sleep_mode_info_host.lowLatencyMode = pSleepModeInfo->lowLatencyMode;
+    sleep_mode_info_host.lowLatencyBoost = pSleepModeInfo->lowLatencyBoost;
+    sleep_mode_info_host.minimumIntervalUs = pSleepModeInfo->minimumIntervalUs;
+
+    return vk_device->p_vkSetLatencySleepModeNV(vk_device->host.device, vk_swapchain->obj.host.swapchain, &sleep_mode_info_host);
+}
+
 static VkResult win32u_vkCreateSwapchainKHR( VkDevice client_device, const VkSwapchainCreateInfoKHR *create_info,
                                              const VkAllocationCallbacks *allocator, VkSwapchainKHR *ret )
 {
@@ -1225,6 +1243,21 @@ static VkResult record_compute_cmd( struct vulkan_device *device, struct swapcha
     return VK_SUCCESS;
 }
 
+
+#define win32u_vk_find_struct(s, t) win32u_vk_find_struct_((void *)s, VK_STRUCTURE_TYPE_##t)
+static void *win32u_vk_find_struct_(void *s, VkStructureType t)
+{
+    VkBaseOutStructure *header;
+
+    for (header = s; header; header = header->pNext)
+    {
+        if (header->sType == t)
+            return header;
+    }
+
+    return NULL;
+}
+
 static VkResult win32u_vkQueuePresentKHR( VkQueue client_queue, const VkPresentInfoKHR *present_info )
 {
     static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
@@ -1335,6 +1368,8 @@ static VkResult win32u_vkQueuePresentKHR( VkQueue client_queue, const VkPresentI
     if (n_hacks > 0)
     {
         VkPipelineStageFlags waitStage, *waitStages, *waitStages_arr = NULL;
+        VkLatencySubmissionPresentIdNV latencySubmitInfo;
+        VkPresentIdKHR *present_id;
 
         if (present_info->waitSemaphoreCount > 1)
         {
@@ -1359,6 +1394,15 @@ static VkResult win32u_vkQueuePresentKHR( VkQueue client_queue, const VkPresentI
         submitInfo.signalSemaphoreCount = 1;
         submitInfo.pSignalSemaphores = &blit_sema;
 
+        if ((queue->device->low_latency_enabled) &&
+            (present_id = win32u_vk_find_struct(&present_info_host, PRESENT_ID_KHR)))
+        {
+            latencySubmitInfo.sType = VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV;
+            latencySubmitInfo.pNext = NULL;
+            latencySubmitInfo.presentID = *present_id->pPresentIds;
+            submitInfo.pNext = &latencySubmitInfo;
+        }
+
         if ((res = device->p_vkQueueSubmit( queue->host.queue, 1, &submitInfo, VK_NULL_HANDLE )))
         {
             ERR( "vkQueueSubmit: %d\n", res );
@@ -1452,6 +1496,7 @@ static struct vulkan_funcs vulkan_funcs =
     .p_vkGetSwapchainImagesKHR = win32u_vkGetSwapchainImagesKHR,
     .p_vkQueuePresentKHR = win32u_vkQueuePresentKHR,
     .p_get_host_surface_extension = win32u_get_host_surface_extension,
+    .p_vkSetLatencySleepModeNV = win32u_vkSetLatencySleepModeNV,
 };
 
 static VkResult nulldrv_vulkan_surface_create( HWND hwnd, VkInstance instance, VkSurfaceKHR *surface, void **private )
diff --git a/include/wine/vulkan_driver.h b/include/wine/vulkan_driver.h
index 15d03383e12..329758551f6 100644
--- a/include/wine/vulkan_driver.h
+++ b/include/wine/vulkan_driver.h
@@ -133,6 +133,7 @@ struct vulkan_device
     unsigned int allocated_fence_ops_count;
 
     BOOL keyed_mutexes_enabled;
+    BOOL low_latency_enabled;
 };
 
 static inline struct vulkan_device *vulkan_device_from_handle( VkDevice handle )
@@ -210,6 +211,7 @@ struct vulkan_funcs
     PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR p_vkGetPhysicalDeviceWin32PresentationSupportKHR;
     PFN_vkGetSwapchainImagesKHR p_vkGetSwapchainImagesKHR;
     PFN_vkQueuePresentKHR p_vkQueuePresentKHR;
+    PFN_vkSetLatencySleepModeNV p_vkSetLatencySleepModeNV;
 
     /* winevulkan specific functions */
     const char *(*p_get_host_surface_extension)(void);
From 64889703731ec38833154c4b2b882b1fce69f3b8 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sat, 3 May 2025 04:12:53 -0700
Subject: [PATCH] makedep: Add the nls subdir to __tooldeps__

---
 tools/makedep.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/tools/makedep.c b/tools/makedep.c
index 4c9333e401b..6fbd5bc86d0 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -3833,6 +3833,8 @@ static void output_subdirs( struct makefile *make )
         strarray_addall_path( &all_targets, submakes[i]->obj_dir, submakes[i]->font_files );
         if (!strcmp( submakes[i]->obj_dir, "tools" ) || !strncmp( submakes[i]->obj_dir, "tools/", 6 ))
             strarray_add( &tooldeps_deps, obj_dir_path( submakes[i], "all" ));
+        if (!strcmp( submakes[i]->obj_dir, "nls" ) || !strncmp( submakes[i]->obj_dir, "nls/", 4 ))
+            strarray_add( &tooldeps_deps, obj_dir_path( submakes[i], "all" ));
         if (submakes[i]->testdll)
             strarray_add( &buildtest_deps, obj_dir_path( submakes[i], "all" ));
         for (j = 0; j < NB_INSTALL_RULES; j++)
diff --git a/dlls/winegstreamer/media-converter/lib.c b/dlls/winegstreamer/media-converter/lib.c
index 4f7884c1178..bdbda22f697 100644
--- a/dlls/winegstreamer/media-converter/lib.c
+++ b/dlls/winegstreamer/media-converter/lib.c
@@ -306,30 +306,54 @@ void dump_fozdb_close(struct dump_fozdb *db)
 bool media_converter_init(void)
 {
     GST_DEBUG_CATEGORY_INIT(media_converter_debug,
-            "protonmediaconverter", GST_DEBUG_FG_YELLOW, "Proton media converter");
+                            "protonmediaconverter", GST_DEBUG_FG_YELLOW, "Proton media converter");

-    if (!GST_ELEMENT_REGISTER(protonvideoconverter, NULL))
+    // Check if the PROTON_VIDEO_CONVERT environment variable is set to 0
+    // Only try to register if the envvar isn't set
+    const char *proton_video_convert = getenv("PROTON_VIDEO_CONVERT");
+    if (!proton_video_convert || strcmp(proton_video_convert, "0") != 0)
     {
-        GST_ERROR("Failed to register protonvideoconverter.");
-        return false;
+        if (!GST_ELEMENT_REGISTER(protonvideoconverter, NULL))
+        {
+            GST_ERROR("Failed to register protonvideoconverter.");
+            return false;
+        }
     }

-    if (!GST_ELEMENT_REGISTER(protonaudioconverter, NULL))
+    // Check if the PROTON_AUDIO_CONVERT environment variable is set to 0
+    // Only try to register if the envvar isn't set
+    const char *proton_audio_convert = getenv("PROTON_AUDIO_CONVERT");
+    if (!proton_audio_convert || strcmp(proton_audio_convert, "0") != 0)
     {
-        GST_ERROR("Failed to register protonaudioconverter.");
-        return false;
+        if (!GST_ELEMENT_REGISTER(protonaudioconverter, NULL))
+        {
+            GST_ERROR("Failed to register protonaudioconverter.");
+            return false;
+        }
     }

-    if (!GST_ELEMENT_REGISTER(protonaudioconverterbin, NULL))
+    // Check if the PROTON_AUDIO_CONVERT_BIN environment variable is set to 0
+    // Only try to register if the envvar isn't set
+    const char *proton_audio_convert_bin = getenv("PROTON_AUDIO_CONVERT_BIN");
+    if (!proton_audio_convert_bin || strcmp(proton_audio_convert_bin, "0") != 0)
     {
-        GST_ERROR("Failed to register protonaudioconverterbin.");
-        return false;
+        if (!GST_ELEMENT_REGISTER(protonaudioconverterbin, NULL))
+        {
+            GST_ERROR("Failed to register protonaudioconverterbin.");
+            return false;
+        }
     }

-    if (!GST_ELEMENT_REGISTER(protondemuxer, NULL))
+    // Check if the PROTON_DEMUX environment variable is set to 0
+    // Only try to register if the envvar isn't set
+    const char *proton_demuxer = getenv("PROTON_DEMUX");
+    if (!proton_demuxer || strcmp(proton_demuxer, "0") != 0)
     {
-        GST_ERROR("Failed to register protondemuxer.");
-        return false;
+        if (!GST_ELEMENT_REGISTER(protondemuxer, NULL))
+        {
+            GST_ERROR("Failed to register protondemuxer.");
+            return false;
+        }
     }

     return true;
From ff045a9a10273c018680f0107095eff74fa9c4b3 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Mon, 23 Sep 2024 11:03:23 -0700
Subject: [PATCH] ntdll: Downgrade 'using kernel write watches' from MESSAGE to
 TRACE.

It's overly verbose to be helpful, and clutters the log output.
---
 dlls/ntdll/unix/virtual.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/virtual.c b/dlls/ntdll/unix/virtual.c
index 53db5a354c8..7887a2fa67f 100644
--- a/dlls/ntdll/unix/virtual.c
+++ b/dlls/ntdll/unix/virtual.c
@@ -3772,7 +3772,7 @@ void virtual_init(void)
         kernel_writewatch_init();
 
     if (use_kernel_writewatch)
-        WARN( "using kernel write watches, use_kernel_writewatch %d.\n", use_kernel_writewatch );
+        TRACE( "using kernel write watches, use_kernel_writewatch %d.\n", use_kernel_writewatch );
 
     if (preload_info && *preload_info)
         for (i = 0; (*preload_info)[i].size; i++)
-- 
2.46.1
