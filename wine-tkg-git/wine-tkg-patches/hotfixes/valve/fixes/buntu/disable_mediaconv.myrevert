From ada42b964f6fb4cc55b70f2ec0ac109fd00ca495 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 3 Apr 2024 20:07:38 -0600
Subject: [PATCH] winegstreamer: Destroy wg_transform in
 video_decoder/transform_SetInputType().

CW-Bug-Id: #23621
---
 dlls/mf/tests/resource.rc          |   2 +-
 dlls/mf/tests/transform.c          |  51 ++++++++++++++++++++++++++++-
 dlls/winegstreamer/video_decoder.c |   5 +++
 3 files changed, 56 insertions(+), 2 deletions(-)

diff --git a/dlls/mf/tests/resource.rc b/dlls/mf/tests/resource.rc
index d9595c68980..ab1fb7ecbb0 100644
--- a/dlls/mf/tests/resource.rc
+++ b/dlls/mf/tests/resource.rc
@@ -55,7 +55,7 @@ mp3encdata.bin RCDATA mp3encdata.bin
 mp3decdata.bin RCDATA mp3decdata.bin

 /* Generated with:
- *  gst-launch-1.0 videotestsrc num-buffers=120 pattern=smpte100 ! \
+ *  gst-launch-1.0 videotestsrc num-buffers=360 pattern=smpte100 ! \
  *      video/x-raw,format=I420,width=84,height=82,framerate=30000/1001 ! \
  *      videoflip method=clockwise ! videoconvert ! \
  *      x264enc ! filesink location=dlls/mf/tests/h264data.bin
diff --git a/dlls/mf/tests/transform.c b/dlls/mf/tests/transform.c
index 468239b0fd4..f11f4368cfb 100644
--- a/dlls/mf/tests/transform.c
+++ b/dlls/mf/tests/transform.c
@@ -4368,7 +4368,7 @@ static void test_h264_decoder(void)
         ok(hr == S_OK, "ProcessMessage returned %#lx\n", hr);
     }
     ok(i == 2, "got %lu iterations\n", i);
-    ok(h264_encoded_data_len == 2425, "got h264_encoded_data_len %lu\n", h264_encoded_data_len);
+    ok(h264_encoded_data_len == 7619, "got h264_encoded_data_len %lu\n", h264_encoded_data_len);
     ok(hr == MF_E_TRANSFORM_STREAM_CHANGE, "ProcessOutput returned %#lx\n", hr);
     ok(output_status == MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE, "got output[0].dwStatus %#lx\n", output_status);
     hr = IMFSample_GetTotalLength(output_sample, &length);
@@ -8358,6 +8358,7 @@ static void test_h264_with_dxgi_manager(void)
         .attributes = output_sample_attributes,
         .sample_time = 333667, .sample_duration = 333667,
         .buffer_count = 1, .buffers = &output_buffer_desc_nv12,
+        .todo_time = TRUE, /* _SetInputType() / _SetOutputType() type resets the output sample timestamp on Windows. */
     };

     IMFDXGIDeviceManager *manager = NULL;
@@ -8512,6 +8513,54 @@ static void test_h264_with_dxgi_manager(void)
     ok(info.dwFlags == (MFT_OUTPUT_STREAM_WHOLE_SAMPLES | MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER
             | MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE | MFT_OUTPUT_STREAM_PROVIDES_SAMPLES), "got %#lx.\n", info.dwFlags);

+    hr = get_next_h264_output_sample(transform, &input_sample, NULL, output, &data, &data_len);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    ok(output[0].dwStatus == 0, "got %#lx.\n", status);
+    sample = output[0].pSample;
+    IMFSample_Release(sample);
+
+    /* Set input and output type trying to change output frame size (results in MF_E_TRANSFORM_STREAM_CHANGE with
+     * frame size reset. */
+    hr = MFCreateMediaType(&type);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFMediaType_SetGUID(type, &MF_MT_MAJOR_TYPE, &MFMediaType_Video);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFMediaType_SetGUID(type, &MF_MT_SUBTYPE, &MFVideoFormat_H264);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFMediaType_SetUINT64(type, &MF_MT_FRAME_SIZE, 1088 | (1920ull << 32));
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFTransform_SetInputType(transform, 0, type, 0);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    IMFMediaType_Release(type);
+    hr = IMFTransform_GetOutputAvailableType(transform, 0, 0, &type);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFMediaType_SetGUID(type, &MF_MT_MAJOR_TYPE, &MFMediaType_Video);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFMediaType_SetGUID(type, &MF_MT_SUBTYPE, &MFVideoFormat_NV12);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFMediaType_SetUINT64(type, &MF_MT_FRAME_SIZE, ((UINT64)1920) << 32 | 1088);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    hr = IMFTransform_SetOutputType(transform, 0, type, 0);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    IMFMediaType_Release(type);
+
+    hr = get_next_h264_output_sample(transform, &input_sample, NULL, output, &data, &data_len);
+    ok(hr == MF_E_TRANSFORM_STREAM_CHANGE, "got %#lx\n", hr);
+    ok(!output[0].pSample, "got %p.\n", output[0].pSample);
+
+    /* Need to set output type with matching size now, or that hangs on Windows. */
+    hr = IMFTransform_GetOutputAvailableType(transform, 0, 0, &type);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    IMFMediaType_GetUINT64(type, &MF_MT_FRAME_SIZE, &frame_size);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    width = frame_size >> 32;
+    height = frame_size & 0xffffffff;
+    ok(width == aligned_width, "got %u.\n", width);
+    ok(height == aligned_height, "got %u.\n", height);
+    hr = IMFTransform_SetOutputType(transform, 0, type, 0);
+    ok(hr == S_OK, "got %#lx\n", hr);
+    IMFMediaType_Release(type);
+
     hr = get_next_h264_output_sample(transform, &input_sample, NULL, output, &data, &data_len);
     ok(hr == S_OK, "got %#lx\n", hr);
     ok(output[0].dwStatus == 0, "got %#lx.\n", status);
diff --git a/dlls/winegstreamer/video_decoder.c b/dlls/winegstreamer/video_decoder.c
index 44e5c4821f2..4b80fb22262 100644
--- a/dlls/winegstreamer/video_decoder.c
+++ b/dlls/winegstreamer/video_decoder.c
@@ -448,6 +448,11 @@ static HRESULT WINAPI transform_SetInputType(IMFTransform *iface, DWORD id, IMFM
         MFCalculateImageSize(decoder->output_types[0], frame_size >> 32, frame_size, (UINT32 *)&decoder->output_info.cbSize);
     }

+    if (decoder->wg_transform)
+    {
+        wg_transform_destroy(decoder->wg_transform);
+        decoder->wg_transform = 0;
+    }
     return S_OK;
 }

From 3f99f09c7680f0b68242bd1e12db3fe45f3b852e Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 3 Apr 2024 15:02:49 -0600
Subject: [PATCH] winegstreamer: Try to handle broken IStream_Stat
 implementation in WM reader OpenStream().

CW-Bug-Id: #23643
---
 dlls/winegstreamer/wm_reader.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/dlls/winegstreamer/wm_reader.c b/dlls/winegstreamer/wm_reader.c
index 8014691def3..a172f1cfbb3 100644
--- a/dlls/winegstreamer/wm_reader.c
+++ b/dlls/winegstreamer/wm_reader.c
@@ -2250,18 +2250,36 @@ static HRESULT WINAPI reader_Open(IWMSyncReader2 *iface, const WCHAR *filename)

 static HRESULT WINAPI reader_OpenStream(IWMSyncReader2 *iface, IStream *stream)
 {
+    static const ULONG64 canary_size = 0xdeadbeeffeedcafe;
     struct wm_reader *reader = impl_from_IWMSyncReader2(iface);
     STATSTG stat;
     HRESULT hr;

     TRACE("reader %p, stream %p.\n", reader, stream);

+    stat.cbSize.QuadPart = canary_size;
     if (FAILED(hr = IStream_Stat(stream, &stat, STATFLAG_NONAME)))
     {
         ERR("Failed to stat stream, hr %#lx.\n", hr);
         return hr;
     }

+    if (stat.cbSize.QuadPart == canary_size)
+    {
+        /* Call of Juarez: Gunslinger implements IStream_Stat as an empty function returning S_OK, leaving
+         * the output stat unchanged. Windows doesn't call IStream_Seek(_SEEK_END) and probably validates
+         * the size against WMV file headers so the bigger cbSize doesn't change anything.
+         * Such streams work as soon as the uninitialized cbSize is big enough which is usually the case
+         * (if that is not the case Windows will favour shorter cbSize). */
+        static const LARGE_INTEGER zero = { 0 };
+        ULARGE_INTEGER pos = { .QuadPart = canary_size };
+
+        if (SUCCEEDED(hr = IStream_Seek(stream, zero, STREAM_SEEK_END, &pos)))
+            IStream_Seek(stream, zero, STREAM_SEEK_SET, NULL);
+        stat.cbSize.QuadPart = pos.QuadPart == canary_size ? 0 : pos.QuadPart;
+        ERR("IStream_Stat did not fill the stream size, size from _Seek %I64u.\n", stat.cbSize.QuadPart);
+    }
+
     EnterCriticalSection(&reader->cs);

     if (reader->wg_parser)

diff --git a/dlls/winegstreamer/Makefile.in b/dlls/winegstreamer/Makefile.in
index 9cae96c5ebc..ac38a1b8964 100644
--- a/dlls/winegstreamer/Makefile.in
+++ b/dlls/winegstreamer/Makefile.in
@@ -32,4 +32,11 @@ SOURCES = \
 	winegstreamer_classes.idl \
 	wm_reader.c \
 	wma_decoder.c \
-	wmv_decoder.c
+	wmv_decoder.c \
+	media-converter/audioconv.c \
+	media-converter/audioconvbin.c \
+	media-converter/fossilize.c \
+	media-converter/lib.c \
+	media-converter/murmur3.c \
+	media-converter/protondemuxer.c \
+	media-converter/videoconv.c

diff --git a/dlls/winegstreamer/unixlib.c b/dlls/winegstreamer/unixlib.c
index 3c51c83b348..881566339eb 100644
--- a/dlls/winegstreamer/unixlib.c
+++ b/dlls/winegstreamer/unixlib.c
@@ -46,6 +46,8 @@

 GST_DEBUG_CATEGORY(wine);

+extern bool media_converter_init(void);
+
 GstGLDisplay *gl_display;

 GstStreamType stream_type_from_caps(GstCaps *caps)
@@ -323,5 +325,12 @@ NTSTATUS wg_init_gstreamer(void *arg)
         }
     }

+    if (!media_converter_init())
+    {
+        GST_ERROR("Failed to init media converter.");
+        gst_object_unref(gl_display);
+        return STATUS_UNSUCCESSFUL;
+    }
+
     return STATUS_SUCCESS;
 }
